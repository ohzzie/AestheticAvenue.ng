import osimport reimport uuidimport sqlite3from datetime import datetime, timezonefrom flask import (    Flask, render_template, request, redirect, url_for, session,    flash, abort, send_from_directory, make_response,)from werkzeug.utils import secure_filenameapp = Flask(__name__)app.secret_key = os.environ.get("SECRET_KEY", os.urandom(24))DB_PATH = os.path.join(os.path.dirname(__file__), "store.db")ADMIN_PASSWORD = os.environ.get("ADMIN_PASSWORD", "Loveosi123")# -----------------------------# DB helpers and init# -----------------------------def get_db():    conn = sqlite3.connect(DB_PATH)    conn.row_factory = sqlite3.Row    return conndef init_db():    conn = get_db()    c = conn.cursor()    c.execute(        """        CREATE TABLE IF NOT EXISTS products (          id INTEGER PRIMARY KEY AUTOINCREMENT,          title TEXT NOT NULL,          slug TEXT NOT NULL UNIQUE,          description TEXT NOT NULL,          price_cents INTEGER NOT NULL,          image_urls TEXT NOT NULL,          tags TEXT DEFAULT '',          stock_qty INTEGER NOT NULL DEFAULT 0,          track_inventory INTEGER NOT NULL DEFAULT 0,          created_at TEXT NOT NULL,          updated_at TEXT NOT NULL        );        """    )    c.execute(        """        CREATE TABLE IF NOT EXISTS product_variants (          id INTEGER PRIMARY KEY AUTOINCREMENT,          product_id INTEGER NOT NULL,          name TEXT NOT NULL,          price_cents INTEGER,          stock_qty INTEGER NOT NULL DEFAULT 0,          track_inventory INTEGER NOT NULL DEFAULT 0,          image_urls TEXT DEFAULT '',          created_at TEXT NOT NULL,          updated_at TEXT NOT NULL,          FOREIGN KEY(product_id) REFERENCES products(id)        );        """    )    c.execute(        """        CREATE TABLE IF NOT EXISTS orders (          id INTEGER PRIMARY KEY AUTOINCREMENT,          order_number TEXT NOT NULL UNIQUE,          customer_name TEXT NOT NULL,          email TEXT NOT NULL,          phone TEXT NOT NULL,          address TEXT NOT NULL,          status TEXT NOT NULL,          total_cents INTEGER NOT NULL,          created_at TEXT NOT NULL,          completed_at TEXT,          receipt_path TEXT        );        """    )    c.execute(        """        CREATE TABLE IF NOT EXISTS order_items (          id INTEGER PRIMARY KEY AUTOINCREMENT,          order_id INTEGER NOT NULL,          product_id INTEGER NOT NULL,          title TEXT NOT NULL,          price_cents INTEGER NOT NULL,          quantity INTEGER NOT NULL,          variant_id INTEGER,          variant_name TEXT,          FOREIGN KEY(order_id) REFERENCES orders(id),          FOREIGN KEY(product_id) REFERENCES products(id)        );        """    )    conn.commit()    conn.close()# -----------------------------# Utilities# -----------------------------def today_str():    return datetime.now(timezone.utc).astimezone().strftime("%Y-%m-%dT%H:%M:%S%z")def slugify(text):    text = str(text or "").strip().lower()    return re.sub(r"[^a-z0-9]+", "-", text).strip("-") or uuid.uuid4().hex[:8]def cents_to_price(cents):    try:        return f"{(int(cents)/100):,.2f}"    except Exception:        return "0.00"def ensure_csrf_token():    if "csrf_token" not in session:        session["csrf_token"] = uuid.uuid4().hex@app.before_requestdef _before():    ensure_csrf_token()def validate_csrf():    if session.get("csrf_token") != request.form.get("csrf_token"):        abort(400, description="Invalid CSRF token")@app.context_processordef inject_globals():    def csrf_token():        return f'<input type="hidden" name="csrf_token" value="{session.get("csrf_token","")}">'    static_folder = app.static_folder or os.path.join(os.path.dirname(__file__), "static")    logo_exists = os.path.exists(os.path.join(static_folder, "logo.png"))    return dict(        csrf_token=csrf_token,        format_price=cents_to_price,        site_name="AestheticAvenue.ng",        logo_exists=logo_exists,        currency_symbol='₦',    )# -----------------------------# Data helpers# -----------------------------def get_product_by_slug(slug):    conn = get_db(); c = conn.cursor()    c.execute("SELECT * FROM products WHERE slug=?", (slug,)); row = c.fetchone(); conn.close(); return rowdef get_product_by_id(pid):    conn = get_db(); c = conn.cursor()    c.execute("SELECT * FROM products WHERE id=?", (pid,)); row = c.fetchone(); conn.close(); return rowdef get_variants_for_product(pid):    conn = get_db(); c = conn.cursor()    c.execute("SELECT * FROM product_variants WHERE product_id=? ORDER BY id", (pid,)); rows = c.fetchall(); conn.close(); return rowsdef get_variant_by_id(vid):    if not vid:        return None    conn = get_db(); c = conn.cursor()    c.execute("SELECT * FROM product_variants WHERE id=?", (vid,)); row = c.fetchone(); conn.close(); return rowdef available_stock_for(product, variant=None):    if variant:        return int(variant["stock_qty"]) if int(variant["track_inventory"]) else 99999999    return int(product["stock_qty"]) if int(product["track_inventory"]) else 99999999def price_for(product, variant=None):    if variant and variant["price_cents"] is not None:        return variant["price_cents"]    return product["price_cents"]# -----------------------------# Public routes# -----------------------------@app.route("/")def index():    conn = get_db(); c = conn.cursor()    c.execute("SELECT * FROM products WHERE instr(','||lower(tags)||',', ',new,')>0 ORDER BY created_at DESC LIMIT 8")    items = c.fetchall()    if not items:        c.execute("SELECT * FROM products ORDER BY created_at DESC LIMIT 8"); items = c.fetchall()    conn.close()    return render_template("index.html", products=items, page_title="Home â€” AestheticAvenue.ng")@app.route("/shop")def shop():    page = request.args.get("page", type=int, default=1)    per_page = 12; offset = max(0, (page-1)*per_page)    conn = get_db(); c = conn.cursor()    c.execute("SELECT COUNT(*) AS c FROM products"); total = c.fetchone()[0]    c.execute("SELECT * FROM products ORDER BY created_at DESC LIMIT ? OFFSET ?", (per_page, offset)); products = c.fetchall()    conn.close(); total_pages = (total + per_page - 1)//per_page if total else 1    return render_template("collections.html", products=products, current_tag=None, page=page, total_pages=total_pages, page_title="Shop â€” AestheticAvenue.ng")@app.route("/collections/<tag>")def collections(tag):    page = request.args.get("page", type=int, default=1)    per_page = 12; offset = max(0, (page-1)*per_page)    tag_lower = tag.lower(); conn = get_db(); c = conn.cursor()    c.execute("SELECT COUNT(*) AS c FROM products WHERE instr(','||lower(tags)||',', ?)>0", (f",{tag_lower},",)); total = c.fetchone()[0]    c.execute(        """        SELECT * FROM products WHERE instr(','||lower(tags)||',', ?)>0        ORDER BY created_at DESC LIMIT ? OFFSET ?        """,        (f",{tag_lower},", per_page, offset),    ); products = c.fetchall(); conn.close()    total_pages = (total + per_page - 1)//per_page if total else 1    return render_template("collections.html", products=products, current_tag=tag, page=page, total_pages=total_pages, page_title=f"{tag.title()} â€” AestheticAvenue.ng")@app.route("/collections")def collections_index():    conn = get_db(); c = conn.cursor(); c.execute("SELECT tags FROM products"); rows = c.fetchall(); conn.close()    tag_set = set()    for r in rows:        raw = r["tags"] or ""        for t in [x.strip().lower() for x in raw.split(",") if x.strip()]: tag_set.add(t)    items = [(t, t.replace("-"," ").title()) for t in sorted(tag_set)]    return render_template("collections_index.html", tags=items, page_title="Collections â€” AestheticAvenue.ng")@app.route("/product/<slug>")def product(slug):    p = get_product_by_slug(slug)    if not p: abort(404)    variants = get_variants_for_product(p["id"]) if p else []    return render_template("product.html", p=p, variants=variants, page_title=f"{p['title']} â€” AestheticAvenue.ng")@app.route("/search")def search():    q = request.args.get("q", "").strip(); products = []    if q:        like = f"%{q.lower()}%"; conn = get_db(); c = conn.cursor()        c.execute(            """            SELECT * FROM products            WHERE lower(title) LIKE ? OR lower(tags) LIKE ? OR lower(description) LIKE ?            ORDER BY created_at DESC            """,            (like, like, like),        ); products = c.fetchall(); conn.close()    return render_template("search.html", products=products, q=q, page_title="Search â€” AestheticAvenue.ng")# -----------------------------# Cart + Checkout# -----------------------------def get_cart():    return session.setdefault("cart", [])def save_cart(cart):    session["cart"] = cart@app.route("/cart", methods=["GET","POST"])def cart():    if request.method == "POST":        validate_csrf()        action = request.form.get("action"); pid = request.form.get("product_id", type=int)        vid = request.form.get("variant_id", type=int); qty = request.form.get("quantity", type=int, default=1)        basket = get_cart()        if action == "add":            if not get_product_by_id(pid): abort(400, description="Invalid product")            p = get_product_by_id(pid); v = get_variant_by_id(vid) if vid else None            if get_variants_for_product(pid) and not vid:                flash("Please select a variant (e.g., color) before adding to cart.", "info"); return redirect(url_for("product", slug=p["slug"]))            max_avail = available_stock_for(p, v)            if max_avail <= 0: flash("This item is out of stock.", "danger"); return redirect(url_for("cart"))            qty = max(1, min(qty, max_avail))            item = next((i for i in basket if i.get("product_id") == pid and i.get("variant_id") == vid), None)            if item: item["quantity"] = max(1, min(item["quantity"] + qty, max_avail))            else: basket.append({"product_id": pid, "variant_id": vid, "quantity": qty})            save_cart(basket); flash("Added to cart.", "success")        elif action == "update":            item = next((i for i in basket if i.get("product_id") == pid and i.get("variant_id") == vid), None)            if item:                p = get_product_by_id(pid); v = get_variant_by_id(vid) if vid else None                max_avail = available_stock_for(p, v); item["quantity"] = max(1, min(qty, max_avail)); save_cart(basket)        elif action == "remove":            basket = [i for i in basket if not (i.get("product_id") == pid and i.get("variant_id") == vid)]; save_cart(basket)        return redirect(url_for("cart"))    basket = get_cart(); enriched = []; total = 0    for item in basket:        p = get_product_by_id(item["product_id"])         if p:            v = get_variant_by_id(item.get("variant_id")) if item.get("variant_id") else None            unit = price_for(p, v); line = unit * item["quantity"]; total += line            enriched.append({"product": p, "variant": v, "quantity": item["quantity"], "line_total": line, "unit_price": unit})    return render_template("cart.html", cart_items=enriched, total_cents=total, page_title="Your Cart â€” AestheticAvenue.ng")@app.route("/checkout", methods=["GET","POST"])def checkout():    basket = get_cart()    if not basket: flash("Your cart is empty.", "warning"); return redirect(url_for("cart"))    enriched = []; total = 0    for item in basket:        p = get_product_by_id(item["product_id"])         if p:            v = get_variant_by_id(item.get("variant_id")) if item.get("variant_id") else None            unit = price_for(p, v); line = unit * item["quantity"]; max_avail = available_stock_for(p, v)            if max_avail <= 0: name = f"{p['title']}" + (f" ({v['name']})" if v else ""); flash(f"{name} is out of stock and was removed from your cart.", "danger"); continue            if item["quantity"] > max_avail: item["quantity"] = max_avail; save_cart(basket); line = unit * item["quantity"]; flash("Quantity adjusted to available stock.", "info")            total += line; enriched.append({"product": p, "variant": v, "quantity": item["quantity"], "line_total": line, "unit_price": unit})    if request.method == "POST":        validate_csrf()        name = request.form.get("name", "").strip(); email = request.form.get("email", "").strip()        phone = request.form.get("phone", "").strip(); address = request.form.get("address", "").strip()        receipt_file = request.files.get("receipt")        if not name or not email or not address or not phone:            flash("Please fill in your name, email, phone, and address.", "danger");            return render_template("checkout.html", cart_items=enriched, total_cents=total, page_title="Checkout â€” AestheticAvenue.ng")        if not receipt_file or receipt_file.filename.strip() == "":            flash("Please upload a picture of your transfer receipt.", "danger");            return render_template("checkout.html", cart_items=enriched, total_cents=total, page_title="Checkout â€” AestheticAvenue.ng")        allowed_exts = {"jpg","jpeg","png","webp","gif","heic"}        fn = secure_filename(receipt_file.filename); ext = fn.rsplit('.',1)[-1].lower() if '.' in fn else ''        if ext not in allowed_exts:            flash("Receipt must be an image (jpg, jpeg, png, webp, gif, heic).", "danger");            return render_template("checkout.html", cart_items=enriched, total_cents=total, page_title="Checkout â€” AestheticAvenue.ng")        order_number = f"AA-{datetime.now().strftime('%Y%m%d')}-{uuid.uuid4().hex[:4].upper()}"        uploads_dir = os.path.join(os.path.dirname(__file__), "uploads", "receipts"); os.makedirs(uploads_dir, exist_ok=True)        receipt_name = f"{order_number}_{fn}"; receipt_path = os.path.join(uploads_dir, receipt_name)        try: receipt_file.save(receipt_path)        except Exception: flash("Failed to save receipt image. Please try again.", "danger"); return render_template("checkout.html", cart_items=enriched, total_cents=total, page_title="Checkout â€” AestheticAvenue.ng")        conn = get_db(); c = conn.cursor()        c.execute(            """            INSERT INTO orders (order_number, customer_name, email, phone, address, status, total_cents, created_at, receipt_path)            VALUES (?, ?, ?, ?, ?, 'new', ?, ?, ?)            """,            (order_number, name, email, phone, address, total, today_str(), receipt_name),        ); oid = c.lastrowid        for line in enriched:            p = line["product"]; v = line.get("variant"); title = p["title"] + (f" ({v['name']})" if v else "")            c.execute(                """                INSERT INTO order_items (order_id, product_id, title, price_cents, quantity, variant_id, variant_name)                VALUES (?, ?, ?, ?, ?, ?, ?)                """,                (oid, p["id"], title, line["unit_price"], line["quantity"], (v and v["id"]) or None, (v and v["name"]) or None),            )        conn.commit(); conn.close(); session["cart"] = []        return redirect(url_for("order_success", order_number=order_number))    return render_template("checkout.html", cart_items=enriched, total_cents=total, page_title="Checkout â€” AestheticAvenue.ng")@app.route("/order/success/<order_number>")def order_success(order_number):    return render_template("order_success.html", order_number=order_number, page_title="Order received â€” AestheticAvenue.ng")# -----------------------------# Static pages to satisfy header/footer links# -----------------------------@app.route("/about")def about():    return render_template("about.html", page_title="About â€” AestheticAvenue.ng")@app.route("/faq")def faq():    return render_template("faq.html", page_title="FAQ â€” AestheticAvenue.ng")@app.route("/contact")def contact():    return render_template("contact.html", page_title="Contact â€” AestheticAvenue.ng")@app.route("/shipping-returns")def shipping():    return render_template("shipping.html", page_title="Shipping & Returns")@app.route("/privacy")def privacy():    return render_template("privacy.html", page_title="Privacy Policy")@app.route("/terms")def terms():    return render_template("terms.html", page_title="Terms & Conditions")@app.errorhandler(404)def not_found(e):    return render_template("404.html", page_title="Not Found"), 404@app.route('/favicon.ico')def favicon():    return send_from_directory('static', 'favicon.svg')# -----------------------------# Minimal Admin endpoints (for links in UI)# -----------------------------def _admin_required():    if not session.get("admin_logged_in"):        return redirect(url_for("admin_login", next=request.path))    return None@app.route("/admin/login", methods=["GET", "POST"])def admin_login():    if request.method == "POST":        validate_csrf()        password = request.form.get("password", "")        if password == ADMIN_PASSWORD:            session["admin_logged_in"] = True            flash("Welcome back.", "success")            dest = request.args.get("next") or url_for("admin_orders")            return redirect(dest)        flash("Invalid password.", "danger")    return render_template("admin_login.html", page_title="Admin Login")@app.route("/admin/logout")def admin_logout():    session.pop("admin_logged_in", None)    flash("Logged out.", "info")    return redirect(url_for("admin_login"))@app.route("/admin/orders")def admin_orders():    redir = _admin_required()    if redir: return redir    status = request.args.get("status", "new")    conn = get_db(); c = conn.cursor()    if status == "all":        c.execute("SELECT * FROM orders ORDER BY created_at DESC")    else:        c.execute("SELECT * FROM orders WHERE status = ? ORDER BY created_at DESC", (status,))    orders = c.fetchall(); conn.close()    return render_template("admin_orders.html", orders=orders, status=status, page_title="Admin â€” Orders")@app.route("/admin/orders/<int:order_id>")def admin_order_detail(order_id):    redir = _admin_required()    if redir: return redir    conn = get_db(); c = conn.cursor()    c.execute("SELECT * FROM orders WHERE id=?", (order_id,)); order = c.fetchone()    if not order:        conn.close(); abort(404)    c.execute("SELECT * FROM order_items WHERE order_id=?", (order_id,)); items = c.fetchall(); conn.close()    return render_template("admin_orders.html", order=order, items=items, detail=True, page_title=f"Order {order['order_number']}")@app.route("/admin/orders/<int:order_id>/confirm_payment", methods=["POST"])def admin_order_confirm_payment(order_id):    redir = _admin_required()    if redir: return redir    validate_csrf()    conn = get_db(); c = conn.cursor()    c.execute("UPDATE orders SET status='payment_confirmed' WHERE id=?", (order_id,))    conn.commit(); conn.close()    flash("Payment marked as confirmed.", "success")    return redirect(url_for("admin_orders", status="payment_confirmed"))@app.route("/admin/orders/<int:order_id>/complete", methods=["POST"])def admin_order_complete(order_id):    redir = _admin_required()    if redir: return redir    validate_csrf()    conn = get_db(); c = conn.cursor()    c.execute("UPDATE orders SET status='completed', completed_at=? WHERE id=?", (today_str(), order_id))    conn.commit(); conn.close()    flash("Order marked as completed.", "success")    return redirect(url_for("admin_orders", status="completed"))@app.route("/admin/orders/export.csv")def admin_orders_export():    redir = _admin_required()    if redir: return redir    status = request.args.get("status", "all")    conn = get_db(); c = conn.cursor()    if status == "all":        c.execute("SELECT * FROM orders ORDER BY created_at DESC")    else:        c.execute("SELECT * FROM orders WHERE status = ? ORDER BY created_at DESC", (status,))    orders = c.fetchall()    rows = [["order_number","customer_name","email","phone","address","status","total","created_at","completed_at"]]    for o in orders:        rows.append([o["order_number"], o["customer_name"], o["email"], o["phone"], o["address"], o["status"], cents_to_price(o["total_cents"]), o["created_at"], o["completed_at"] or ""])     csv_lines = []    for r in rows:        csv_lines.append(",".join('"%s"' % str(col).replace('"','""') for col in r))    resp = make_response("\n".join(csv_lines))    resp.headers["Content-Disposition"] = f"attachment; filename=orders_{status}.csv"    resp.headers["Content-Type"] = "text/csv"    return resp@app.route("/admin/receipts/<path:filename>")def admin_receipt(filename):    redir = _admin_required()    if redir: return redir    uploads_dir = os.path.join(os.path.dirname(__file__), "uploads", "receipts")    return send_from_directory(uploads_dir, filename)@app.route("/admin/products")def admin_products():    redir = _admin_required()    if redir: return redir    conn = get_db(); c = conn.cursor()    c.execute("SELECT * FROM products ORDER BY created_at DESC"); products = c.fetchall(); conn.close()    return render_template("admin_products.html", products=products, page_title="Admin â€” Products")@app.route("/admin/products/new", methods=["GET", "POST"])def admin_product_new():    redir = _admin_required()    if redir: return redir    return render_template("admin_product_form.html", p=None, variants=[], page_title="New Product")@app.route("/admin/products/<int:pid>/edit", methods=["GET", "POST"])def admin_product_edit(pid):    redir = _admin_required()    if redir: return redir    conn = get_db(); c = conn.cursor()    c.execute("SELECT * FROM products WHERE id=?", (pid,)); p = c.fetchone()    c.execute("SELECT * FROM product_variants WHERE product_id=? ORDER BY id", (pid,)); variants = c.fetchall(); conn.close()    if not p: abort(404)    return render_template("admin_product_form.html", p=p, variants=variants, page_title=f"Edit {p['title']}")@app.route("/admin/products/<int:pid>/delete", methods=["POST"])def admin_product_delete(pid):    redir = _admin_required()    if redir: return redir    validate_csrf()    conn = get_db(); c = conn.cursor()    c.execute("DELETE FROM products WHERE id=?", (pid,)); conn.commit(); conn.close()    flash("Product deleted.", "info")    return redirect(url_for("admin_products"))@app.route("/admin/products/import", methods=["POST"])def admin_products_import():    redir = _admin_required()    if redir: return redir    validate_csrf()    flash("Import not implemented in this build.", "warning")    return redirect(url_for("admin_products"))@app.route("/admin/products/template.csv")def admin_products_template_csv():    redir = _admin_required()    if redir: return redir    header = ["title", "description", "price", "image_urls", "tags"]    example = [["Sample Product", "Short description", "15000", "https://example.com/img1.jpg, https://example.com/img2.jpg", "new, caps"]]    rows = [header] + example    output = []    for row in rows:        output.append(",".join('"%s"' % str(col).replace('"', '""') for col in row))    resp = make_response("\n".join(output))    resp.headers["Content-Disposition"] = "attachment; filename=products_template.csv"    resp.headers["Content-Type"] = "text/csv"    return respif __name__ == "__main__":    init_db()    app.run(debug=True)
@app.route("/admin/products/<int:pid>/variants/new", methods=["POST"])
def admin_variant_new(pid):
    redir = _admin_required()
    if redir: return redir
    validate_csrf()
    name = (request.form.get("name") or "").strip()
    price_raw = request.form.get("price")
    price_cents = None
    try:
        price_cents = int(round(float(str(price_raw).replace(',', '')) * 100)) if price_raw else None
    except Exception:
        price_cents = None
    stock_qty = max(0, request.form.get("stock_qty", type=int, default=0) or 0)
    track_inventory = 1 if request.form.get("track_inventory") == "on" else 0
    image_urls = (request.form.get("image_urls") or "").strip()
    if not name:
        flash("Variant name is required.", "danger")
        return redirect(url_for("admin_product_edit", pid=pid))
    now = today_str()
    conn = get_db(); c = conn.cursor()
    c.execute("""
        INSERT INTO product_variants (product_id, name, price_cents, stock_qty, track_inventory, image_urls, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    """, (pid, name, price_cents, stock_qty, track_inventory, image_urls, now, now))
    conn.commit(); conn.close()
    flash("Variant added.", "success")
    return redirect(url_for("admin_product_edit", pid=pid))

@app.route("/admin/products/<int:pid>/variants/<int:vid>/delete", methods=["POST"])
def admin_variant_delete(pid, vid):
    redir = _admin_required()
    if redir: return redir
    validate_csrf()
    conn = get_db(); c = conn.cursor()
    c.execute("DELETE FROM product_variants WHERE id=? AND product_id=?", (vid, pid))
    conn.commit(); conn.close()
    flash("Variant deleted.", "info")
    return redirect(url_for("admin_product_edit", pid=pid))    app.run(debug=True)
